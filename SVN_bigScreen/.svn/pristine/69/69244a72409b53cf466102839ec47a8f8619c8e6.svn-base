package com.huawei.sc_mobile_fwd.comm.util;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.huawei.seq.WebCoreTools;

/**
 * 测试数据工具类
 *
 */
public class TestDataUtil
{
    private static final Logger logger = LoggerFactory.getLogger(TestDataUtil.class);
    
    /** 
     * 解析csv文件 到一个list中 每个单元个为一个String类型记录，每一行为一个list。 再将所有的行放到一个总list中 
     */  
    private static List<List<String>> readCSVFile(String fileName)
    {   
        String path = WebCoreTools.getConfigFile(fileName).getFile().getPath();
        FileInputStream fis = null;
        try
        {
            fis = new FileInputStream(new File(path));
        }
        catch (FileNotFoundException e1)
        {
            logger.error("FileNotFoundException");
            return null;
        }
        InputStreamReader fr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(fr);  
        String rec = null;// 一行  
        String str;// 一个单元格  
        List<List<String>> listFile = new ArrayList<List<String>>();  
        try
        {  
            // 读取一行  
            while ((rec = br.readLine()) != null)
            {
                Pattern pCells = Pattern  
                        .compile("(\"[^\"]*(\"{2})*[^\"]*\")*[^,]*,");  
                Matcher mCells = pCells.matcher(rec);  
                List<String> cells = new ArrayList<String>();// 每行记录一个list  
                // 读取每个单元格  
                while (mCells.find())
                {
                    str = mCells.group();  
                    str = str.replaceAll(
                            "(?sm)\"?([^\"]*(\"{2})*[^\"]*)\"?.*,", "$1");  
                    str = str.replaceAll("(?sm)(\"(\"))", "$2");  
                    cells.add(str);  
                }  
                listFile.add(cells);  
            }  
        }
        catch (Exception e) 
        {  
            e.printStackTrace();  
        }
        finally
        {  
            if (fr != null)
            {  
                try
                {
                    fr.close();
                }
                catch (IOException e)
                {
                    logger.error("IOException");
                }  
            }  
            if (br != null)
            {  
                try
                {
                    br.close();
                }
                catch (IOException e)
                {
                    logger.error("IOException");
                }
            }  
        }  
        return listFile;  
    }
    
    /**
     * 根据scv文件返回内容
     * @param path 
     * @return List<Map<String, Object>> 
     * @throws IOException 
     */
    public static List<Map<String, Object>> getDataByCsv(String path)
    {
        List<Map<String, Object>> data = new ArrayList<Map<String, Object>>();
        List<List<String>> lines = readCSVFile(path);
        
        List<String> head = lines.get(0);
        for (int i = 1; i < lines.size(); i++)
        {
            List<String> content = lines.get(i);
            Map<String, Object> row = new HashMap<String, Object>();
            for (int j = 0; j < head.size(); j++)
            {
                String key = head.get(j);
                String value = content.get(j);
                // 表头类型指定为String
                if (key.contains("(String)"))
                {
                    key = key.substring(0, key.indexOf("("));
                    row.put(key, value);
                } 
                else if (NumberValidationUtils.isDecimal(value))
                {
                    row.put(key, new BigDecimal(value));
                }
                else if (NumberValidationUtils.isWholeNumber(value))
                {
                    row.put(key, Integer.parseInt(value));
                }
                else
                {
                    row.put(key, value);
                }
            }
            data.add(row);
        }
        return data;
    }
}
